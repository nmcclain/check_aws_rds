#!/usr/bin/php -q
<?php

#############################
# YOU MUST SET THESE VARIABLES:
$EC2_HOME = '/usr/local/ec2-api-tools/';		# http://aws.amazon.com/developertools/351
$AWS_PHP_SDK_PATH = 'awsphpsdk/';	# http://aws.amazon.com/sdkforphp/
$JAVA_HOME = '/usr/java/latest';			# http://www.java.com/en/download/

#############################
# YOU CAN OPTIONALLY SET THESE VARIABLES:
putenv('TZ=America/Denver');

#############################
# YOU SHOULDN'T HAVE TO CHANGE ANYTHING BELOW HERE:
error_reporting(-1);
putenv('EC2_HOME='.$EC2_HOME);
putenv('JAVA_HOME='.$JAVA_HOME);
require_once $AWS_PHP_SDK_PATH.'/sdk.class.php';

$regions = array (
	'E1' => 'http://monitoring.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl',
	'W1' => 'http://monitoring.us-west-1.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl',
	'EU' => 'http://monitoring.eu-west-1.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl',
	'AP' => 'http://monitoring.ap-southeast-1.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl',
	);

$options = getopt("R:K:S:i:c:d:");
if (!isset($options["R"]) or (!isset($regions[$options["R"]]))) { usage(1); }
if (!isset($options["K"])) { usage(); } 
if (!isset($options["S"])) { usage(); }
if (!isset($options["i"])) { usage(); }
$instance = $options["i"];

if (isset($options["c"])) { $cpumax = $options["c"]; }
if (isset($options["d"])) { $diskmin = $options["d"]; }

define('AWS_KEY', $options["K"]);
define('AWS_SECRET_KEY', $options["S"]);

$cw = new AmazonCloudWatch();
$response = $cw->list_metrics(array( 'Namespace' => 'AWS/RDS'));

$metrics = array();
foreach ($response->body->ListMetricsResult->Metrics->member as $v ) {
	if ( isset( $v->Dimensions->member )) {
		if ( strcmp( (string) $v->Dimensions->member->Name, "DBInstanceIdentifier") ==0) {
			if ($instance == (string) $v->Dimensions->member->Value ) {
				$metrics[] = (string) $v->MetricName ;
			}
		}
	}

}

$now=time();
$perfdata=array();
$result=0;
$warningtext="";
foreach ($metrics as $m) {
	if (in_array($m, array( "ReadLatency", "WriteLatency"))) {
		$unit = 'Seconds';
	} else if (in_array($m, array( "WriteIOPS", "ReadIOPS"))) {
		$unit = 'Count/Second';
	} else if (in_array($m, array( "DatabaseConnections"))) {
		$unit = 'Count';
	} else if (in_array($m, array( "FreeableMemory", "FreeStorageSpace", "SwapUsage"))) {
		$unit = 'Bytes';
	} else if (in_array($m, array( "CPUUtilization"))) {
		$unit = 'Percent';
	} else if (in_array($m, array( "WriteThroughput", "ReadThroughput"))) {
		$unit = 'Bytes/Second';
	} else { $unit = 'None'; }

        $r = $cw->get_metric_statistics('AWS/RDS', $m, date( "r", $now- 300), date("r", $now), 300, 'Average', $unit, array("DBInstanceIdentifier" => $instance));

	if (isset( $r->body->GetMetricStatisticsResult->Datapoints->member[0]->Average)) {
		$thedata = floatval((string) $r->body->GetMetricStatisticsResult->Datapoints->member[0]->Average);
		array_push($perfdata,$m."=".$thedata);
		# UNIT: (string) $r->body->GetMetricStatisticsResult->Datapoints->member[0]->Unit

		# check thresholds
		if (isset($cpumax) and ($m == 'CPUUtilization')) {
			if ($thedata >= $cpumax) {
				if ($result<1) { $result=1; }
				$warningtext.=" High CPU: ".$thedata."%";
			}
		}
		if (isset($diskmin) and ($m == 'FreeStorageSpace')) {
			if ($thedata <= $diskmin) {
				if ($result<2) { $result=2; }
				$warningtext.=" Low storage: ".$thedata." Bytes";
			}
		}
	} else { $result=3; }
}
if ($result==0 ){
	print "RDS OK instance ".$instance." |".join(',', $perfdata)."\n";
	exit(0);
} else if ($result==1 ){
	print "RDS WARNING instance ".$instance.$warningtext." |".join(',', $perfdata)."\n";
	exit(1);
} else if ($result==2 ){
	print "RDS CRITICAL instance ".$instance.$warningtext." |".join(',', $perfdata)."\n";
	exit(2);
} else {
	print "RDS CRITICAL Could not collect AWS RDS data for RDS instance ".$instance." |\n";
	exit(2);
}

function usage($show_regions=0) {
	echo "usage: check_aws_rds -R [E1|W1|EU|AP] -K <AWSKeyString> -S <AWSSecretKeyString> -i <RDSinstancename> [-d <avail_disk_min> -c <cpuusemax>]\n";
	if ($show_regions==1) {
		echo " Region codes:\n";
		echo "	E1: US-East (Northern Virginia) Region\n";
		echo "	W1: US-West (Northern California) Region\n";
		echo "	EU: EU (Ireland) Region\n";
		echo "	AP: Asia Pacific (Singapore) Region\n";
	}
	exit(1);
}


